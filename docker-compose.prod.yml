version: "3.8"

services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: goblog-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-goblog}
      POSTGRES_USER: ${POSTGRES_USER:-goblog}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-goblog123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-goblog} -d ${POSTGRES_DB:-goblog}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - goblog-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 博客后端服务
  goblog:
    image: goblog-goblog:latest
    container_name: goblog-backend-prod
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET:-your-production-secret-key}
      - DB_DRIVER=postgres
      - DB_DSN=host=postgres port=5432 user=${POSTGRES_USER:-goblog} password=${POSTGRES_PASSWORD:-goblog123} dbname=${POSTGRES_DB:-goblog} sslmode=disable
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/goblog", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - goblog-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # PostgreSQL 数据库备份服务
  postgres-backup:
    image: postgres:15-alpine
    container_name: goblog-postgres-backup-prod
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - postgres_backups:/backups
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-goblog123}
      - POSTGRES_USER=${POSTGRES_USER:-goblog}
      - POSTGRES_DB=${POSTGRES_DB:-goblog}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # 每天凌晨2点备份
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}  # 保留7天的备份
    command: |
      sh -c "
        echo '设置PostgreSQL定时备份任务...'
        echo '#!/bin/sh' > /backup.sh
        echo 'BACKUP_FILE=\"/backups/goblog_backup_\$$(date +%Y%m%d_%H%M%S).sql\"' >> /backup.sh
        echo 'echo \"创建备份: \$$BACKUP_FILE\"' >> /backup.sh
        echo 'pg_dump -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB > \$$BACKUP_FILE' >> /backup.sh
        echo 'if [ \$$? -eq 0 ]; then' >> /backup.sh
        echo '  echo \"备份成功: \$$BACKUP_FILE\"' >> /backup.sh
        echo '  gzip \$$BACKUP_FILE' >> /backup.sh
        echo 'else' >> /backup.sh
        echo '  echo \"备份失败\"' >> /backup.sh
        echo '  rm -f \$$BACKUP_FILE' >> /backup.sh
        echo 'fi' >> /backup.sh
        echo 'find /backups -name \"*.gz\" -mtime +$$BACKUP_RETENTION_DAYS -delete' >> /backup.sh
        echo 'echo \"清理$$BACKUP_RETENTION_DAYS天前的备份\"' >> /backup.sh
        chmod +x /backup.sh
        echo '\$$BACKUP_SCHEDULE /backup.sh' > /var/spool/cron/crontabs/root
        echo '启动定时任务...'
        crond -f
      "
    restart: unless-stopped
    networks:
      - goblog-network

  # 可选: Nginx反向代理 (生产环境推荐)
  nginx:
    image: nginx:alpine
    container_name: goblog-nginx-prod
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录 (如果使用HTTPS)
      - nginx_logs:/var/log/nginx
    depends_on:
      - goblog
    restart: unless-stopped
    networks:
      - goblog-network
    profiles:
      - with-nginx  # 使用 --profile with-nginx 启用

# 网络定义
networks:
  goblog-network:
    driver: bridge

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  nginx_logs:
    driver: local 